variables:
  tag: '$(Build.BuildId)'
  AllureReportDirectory: './allure-report'

trigger:
- none

pool:
  vmImage: ubuntu-latest
container: osachi/arkadium:latest

steps:

  - task: Bash@3
    displayName: 'Download and prepare allurectl'
    inputs:
      targetType: 'inline'
      script: |
        wget https://github.com/allure-framework/allurectl/releases/latest/download/allurectl_linux_386 -O ./allurectl
        chmod +x ./allurectl
  - task: NodeTool@0
    inputs:
      versionSpec: '18'
    displayName: 'Install Node.js'
  - script: npm ci
    displayName: 'npm ci'
  - script: mkdir allure-results ; bash -c "./allurectl watch -- npx playwright test"
    displayName: 'Run Playwright tests'
    env:
      CI: 'true'
      ALLURE_ENDPOINT: $(ALLURE_ENDPOINT)
      ALLURE_PROJECT_ID: $(ALLURE_PROJECT_ID)
      ALLURE_TOKEN: $(ALLURE_TOKEN)
      ALLURE_RESULTS: $(ALLURE_RESULTS)
      ALLURE_LAUNCH_NAME: "$(Build.DefinitionName)-$(Build.BuildNumber)"
      ALLURE_LAUNCH_TAGS: "$(Build.SourceBranchName), azure"
      BRANCH: $(Build.SourceBranchName)
  - script: npm install --save-dev allure-commandline ; npx allure generate
    condition: always()


  - task: PublishAllureReport@1
    displayName: 'Publish Allure Report'
    inputs:
      reportDir: 'allure-report'
    condition: always()
  - publish: $(System.DefaultWorkingDirectory)/allure-report
    artifact: allure-report
    condition: always()
  - publish: $(System.DefaultWorkingDirectory)/test-results
    artifact: test-results
    condition: always()
  - task: PublishTestResults@2
    displayName: publish unit test results
    inputs:
      testResultsFormat: 'jUnit'
      testResultsFiles: 'results.xml'
      searchFolder: test-results
      testRunTitle: Unit test results for $(Build.BuildNumber)
      buildConfiguration: debug
      mergeTestResults: true
      failTaskOnMissingResultsFile: true
    condition: succeededOrFailed()
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: test-results
      artifact: test-results
      publishLocation: 'pipeline'
    condition: succeededOrFailed()
  